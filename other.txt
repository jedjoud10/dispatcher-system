    /*
    // only insert it locally to thread local data. gets sent to main thread after ALL systems in this group have executed
    pub fn insert<R: Any + Send + Sync>(&self, resource: R) {
        self.local.get_or_default().borrow_mut().insert(TypeId::of::<R>(), Box::new(resource));
    }

    // checks thread local data first and then checks world data
    pub fn get<R: Any>(&self) -> ReadGuard<R> {
        let id = &TypeId::of::<R>();
        let data = self.local.get_or_default().borrow();

        if !data.contains_key(id) {
            let rwlock = self.global.get(id).unwrap().read();
            let mapped = RwLockReadGuard::map(rwlock, |x| x.as_ref().unwrap().downcast_ref::<R>().unwrap());
            return ReadGuard::Global(mapped);
        }

        let mapped = std::cell::Ref::map(data, |x| x.get(id).unwrap().downcast_ref::<R>().unwrap());
        ReadGuard::Local(mapped)
    }

    // marks "local" as removed, then actually removes it from the world at the end of the group execution
    // if it is accessing world global data, then it simply sets it to None to avoid modifying the global hash map
    pub fn remove<R: Any>(&self) -> Option<R> {
        let id = &TypeId::of::<R>();
        let data = self.local.get_or_default().borrow_mut();

        if !data.contains_key(id) {
            let boxed = self.global.get(id).unwrap().write().take()?;
            return Some(*boxed.downcast::<R>().unwrap());
        }

        data
    }

    // move all the new thread local resources to the main thread
    */



pub enum ReadGuard<'a, R> {
    Local(Ref<'a, R>),
    Global(MappedRwLockReadGuard<'a, R>)
}

pub enum WriteGuard {
} 
